# Check decoders for all types

Decoders =
	Int8(int8) ' '
	Int16(int16) ' '
	Int32(int32) ' '
	Int64(int64) ' '
	Uint8(uint8) ' '
	Uint16(uint16) ' '
	Uint32(uint32) ' '
	Uint64(uint64) ' '
	Float32(float32) ' '
	Float64(float64) ' '
	String(string) ' ';

DecodersLimited = !
	Int8(int8) ' '[:8]
	Int16(int16) ' '[:8]
	Int32(int32) ' '[:8]
	Int64(int64) ' '[:8]
	Uint8(uint8) ' '[:8]
	Uint16(uint16) ' '[:8]
	Uint32(uint32) ' '[:8]
	Uint64(uint64) ' '[:8]
	Float32(float32) ' '[:8]
	Float64(float64) ' '[:8]
	String(string) ' '[:8];

DecodersBounded =
	Int64(int64) ' '[8:16];


DecodersString =
	Int8(int8) " "
	Int16(int16) " "
	Int32(int32) " "
	Int64(int64) " "
	Uint8(uint8) " "
	Uint16(uint16) " "
	Uint32(uint32) " "
	Uint64(uint64) " "
	Float32(float32) " "
	Float64(float64) " "
	String(string) " ";

DecodersLimitedString =
	Int8(int8) " "[:8]
	Int16(int16) " "[:8]
	Int32(int32) " "[:8]
	Int64(int64) " "[:8]
	Uint8(uint8) " "[:8]
	Uint16(uint16) " "[:8]
	Uint32(uint32) " "[:8]
	Uint64(uint64) " "[:8]
	Float32(float32) " "[:8]
	Float64(float64) " "[:8]
	String(string) " "[:8];

DecodersBoundedString =
	Float64(float64) " "[8:16];

DecodersStress = !
	Int8(int8) ' '
	Int16(int16) ' '
	Int32(int32) ' '
	Int64(int64) ' '
	Uint8(uint8) ' '
	Uint16(uint16) ' '
	Uint32(uint32) ' '
	Uint64(uint64) ' '
	Float32(float32) ' '
	Float64(float64) ' '
	String(string) ' ';

DecodersLimitedStress = !
	Int8(int8) ' '[:8]
	Int16(int16) ' '[:8]
	Int32(int32) ' '[:8]
	Int64(int64) ' '[:8]
	Uint8(uint8) ' '[:8]
	Uint16(uint16) ' '[:8]
	Uint32(uint32) ' '[:8]
	Uint64(uint64) ' '[:8]
	Float32(float32) ' '[:8]
	Float64(float64) ' '[:8]
	String(string) ' '[:8];

DecodersBoundedStress =	!
	Int64(int64) ' '[8:16];


DecodersStringStress = !
	Int8(int8) " "
	Int16(int16) " "
	Int32(int32) " "
	Int64(int64) " "
	Uint8(uint8) " "
	Uint16(uint16) " "
	Uint32(uint32) " "
	Uint64(uint64) " "
	Float32(float32) " "
	Float64(float64) " "
	String(string) " ";

DecodersLimitedStringStress = !
	Int8(int8) " "[:8]
	Int16(int16) " "[:8]
	Int32(int32) " "[:8]
	Int64(int64) " "[:8]
	Uint8(uint8) " "[:8]
	Uint16(uint16) " "[:8]
	Uint32(uint32) " "[:8]
	Uint64(uint64) " "[:8]
	Float32(float32) " "[:8]
	Float64(float64) " "[:8]
	String(string) " "[:8];

DecodersBoundedStringStress = !
	Float64(float64) " "[8:16];


DecoderOptionals =
	Int8(int8) ' '
	?Head (^"head=" Data(string) ' ')
	^"end";

DecoderOptionalsStress = !
	Int8(int8) ' '
	?Head (^"head=" Data(string) ' ')
	^"end";

DecoderBranching =
	?^"start "
	?Head (?^"head=" Data(string) ? ' ');

DecoderBranchingStress = !
	?^"start "
	?Head (?^"head=" Data(string) ? ' ');

DoubleOpts = !
	?Head(^"head=" Data(string) ?' ')
	?Rest1(^"rest=" Data(string) ?' ');

Prefixes = !
    ^"123456789" Data(int32) ' ' ^"12345" Rest1(int32) ' ';

FixedLook = !
    Data(int32) "123456789"[2] Rest1(int32) "34"[3];

AnonymousAreas = !
    ? (
        _~'d' ^"ata="
    )
    ? (
        ^"1234"
    )
    Data(string) ? " ";

Split = !
    Name(string) ~'|'
    ^ '|'[1]
    ^ '|'[1]
    ^ '|'[1]
    Count(string) '|'[1];
    
SplitString = !
    Name(string) ~"|"
    ^ "|"[1]
    ^ "|"[1]
    ^ "|"[1]
    Count(string) "|"[1];

Shift1 = !
    B(string) "ba"[3:12];

Shift2 = !
    B(string) 'b'[3:12];

Shift3 = !
    B(string) ~"ba"[3:12];

Shift4 = !
    B(string) ~'b'[3:12];

Jump = !
    First(string) ' '[2:]
    Second(string) ~' '[2:]
    Third(string) "@@"[2:]
    Fourth(string) "@@"[2:];

LookupJump = !
    _' '[2:]
    _"@@"[2:]
    _"ll"[:12]
    _"ee"[2:12]
    _'e'[:12]
    _'f'[2:12];

TargetConstraintsCheck =
    _' '[1:]
    !
    _' '[1:]
    ;

URL =
    ?UserPass(
        User(string) ':'[1:] Password(string) '@'[1:]
    )
    ?User(
        User(string) '@'[1:]
    )
    Host(string) ':'[1:] Port(uint16) ?'/' DBName(string);

IncludeChar =
    Data[string] '@' Field2(int) '@';

IncludeString =
    Data[string] "ab" Field2(int) "ab";

Hex = F1(hex) ' ' F2(hex8) ' ' F3(hex16) ' ' F4(hex32) ' ' F5(hex64);
    
Oct = F1(oct) ' ' F2(oct8) ' ' F3(oct16) ' ' F4(oct32) ' ' F5(oct64);

Dec = F1(dec8.3) ' ' F2(dec12.2) ' ' F3(dec30.8);

RestLength = %15 %<16 %>14;

Str = F1(str) ' ' F2(string);

Star = *'a' F(int) "|" *'a' B(int);

JustToCompile = Head(hex16) '-'[4] Tail(hex16);

JustToCompileString = Head(hex16) "abcd"[4] Tail(hex16);

CustomStr = Data($str);