
/*
 This file was autogenerated via
 --------------------------------------------------------
 ldetool --package ldetesting --go-string regressions.lde
 --------------------------------------------------------
 do not touch it with bare hands!
*/

package ldetesting

import (
	"fmt"
	"strconv"
	"strings"
)

// Regression1 ...
type Regression1 struct {
	Rest  string
	Pid   int32
	Comm  string
	State uint8
	Ppid  int32
}

// Extract ...
func (p *Regression1) Extract(line string) (bool, error) {
	p.Rest = line
	var err error
	var pos int
	var tmp string
	var tmpInt int64

	// Take until ' ' as Pid(int32)
	pos = strings.IndexByte(p.Rest, ' ')
	if pos >= 0 {
		tmp = p.Rest[:pos]
		p.Rest = p.Rest[pos+1:]
	} else {
		return false, nil
	}
	if tmpInt, err = strconv.ParseInt(tmp, 10, 32); err != nil {
		return false, fmt.Errorf("parsing `%s` into field Pid(int32): %s", tmp, err)
	}
	p.Pid = int32(tmpInt)

	// Take until ' ' as Comm(string)
	pos = strings.IndexByte(p.Rest, ' ')
	if pos >= 0 {
		p.Comm = p.Rest[:pos]
		p.Rest = p.Rest[pos+1:]
	} else {
		return false, nil
	}

	// Take until 2nd character  if it is equal to ' ' character as State($uint8)
	if len(p.Rest) < 1+1 || p.Rest[1] != ' ' {
		return false, nil
	}
	tmp = p.Rest[:1]
	p.Rest = p.Rest[1+1:]
	if p.State, err = p.unmarshalState(tmp); err != nil {
		return false, fmt.Errorf("parsing `%s` into field State(uint8): %s", tmp, err)
	}

	// Take until ' ' as Ppid(int32)
	pos = strings.IndexByte(p.Rest, ' ')
	if pos >= 0 {
		tmp = p.Rest[:pos]
		p.Rest = p.Rest[pos+1:]
	} else {
		return false, nil
	}
	if tmpInt, err = strconv.ParseInt(tmp, 10, 32); err != nil {
		return false, fmt.Errorf("parsing `%s` into field Ppid(int32): %s", tmp, err)
	}
	p.Ppid = int32(tmpInt)

	return true, nil
}
